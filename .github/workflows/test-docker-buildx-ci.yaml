name: Docker Buildx CI Test

run-name: Docker Buildx Test

permissions:
  actions: read
  contents: read
  
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select the FastCI branch to use'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - main
          - disabled

  # This will also run the workflow automatically on every push to the 'dev' branch
  push:
    branches:
      - dev

jobs:
  docker-buildx-cli:
    runs-on: ubuntu-latest
    name: Build with Docker Buildx CLI
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Start FastCI Optimization
        if: inputs.branch == 'dev'
        uses: jfrog-fastci/fastci@dev
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          fastci_otel_token: ${{ secrets.FASTCI_TOKEN }}
          install_bashi: true
          bashi_log_level: 'debug'
          enabled_optimizations: 'go_test_junit_optimization'

      - name: Start FastCI Optimization
        if: inputs.branch == 'main'
        uses: jfrog-fastci/fastci@main
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          fastci_otel_token: ${{ secrets.FASTCI_TOKEN }}
          install_bashi: true
          bashi_log_level: 'debug'
          enabled_optimizations: 'go_test_junit_optimization'
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build with Buildx CLI
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag fastci:latest \
            --file Dockerfile \
            .

  docker-buildx-action:
    runs-on: ubuntu-latest
    name: Build with Docker Buildx Action
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Start FastCI Optimization
        if: inputs.branch == 'dev'
        uses: jfrog-fastci/fastci@dev
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          fastci_otel_token: ${{ secrets.FASTCI_OTEL_TOKEN }}
          install_bashi: true
          bashi_log_level: 'debug'
          enabled_optimizations: 'go_test_junit_optimization'

      - name: Start FastCI Optimization
        if: inputs.branch == 'main'
        uses: jfrog-fastci/fastci@main
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          fastci_otel_token: ${{ secrets.FASTCI_OTEL_TOKEN }}
          install_bashi: true
          bashi_log_level: 'debug'
          enabled_optimizations: 'go_test_junit_optimization'
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build with Buildx Action
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: fastci:latest
          push: false

  docker-native-build:
    runs-on: ubuntu-latest
    name: Build with Native Docker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Start FastCI Optimization
        if: inputs.branch == 'dev'
        uses: jfrog-fastci/fastci@dev
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          fastci_otel_token: ${{ secrets.FASTCI_TOKEN }}
          install_bashi: true
          bashi_log_level: 'debug'
          enabled_optimizations: 'go_test_junit_optimization'

      - name: Start FastCI Optimization
        if: inputs.branch == 'main'
        uses: jfrog-fastci/fastci@main
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          fastci_otel_token: ${{ secrets.FASTCI_TOKEN }}
          install_bashi: true
          bashi_log_level: 'debug'
          enabled_optimizations: 'go_test_junit_optimization'
      
      - name: Build with Native Docker
        env:
          DOCKER_BUILDKIT: 0
        run: |
          docker build \
            --tag fastci:latest \
            --file Dockerfile \
            .

---
description: Rules for how to use the GitHub cli and how to manage our tasks via GitHub Projects and Issues
globs: 
alwaysApply: false
---
# FastCI Task Manager

A task management system for the FastCI repository that helps with GitHub issues and projects integration.

Use the gh cli in terminal for all of your commands!!!


## Features

- Enforces branch naming conventions: `[feature/bugfix/refactor/other]/fast-000-task-title`
- Lists tasks in current iteration at the start of a new session
- Manages task assignment, including support for AI agent tasks
- Automates branch creation from issues
- Tracks task status across GitHub Projects

## Settings
Project URL: https://github.com/orgs/jfrog-fastci/projects/1
Project ID: 1


## How to use the Github MCP tools
1. Always get the full context of: 
    a. Issues in TODO, In Progress
2. Make sure every issues that you create have:
    a. Repo that is related to.
    b. Assignee: list the available user options or tag as "For AI Agent" if the task is marked as good for AI developement.
    c. Effort estimation.
    d. Priotiry
    e. Labels 
    f. Type: feature, bug, task
    g. Relation ship: if the task is related to other issue/task make sure it is linked properly on task creation.

## Commands for Listing Tasks
To list all tasks in the project:
```
gh project item-list <item-number> --owner jfrog-fastci --format json
```

To add assignee to task:
```
gh issue edit <item-number> --repo <repo_name> --add-assignee <assignee_name>
```

Scope is always!
{
  "owner": "jfrog-fastci",
}

## Creating Branches for Tasks
To create a branch for a task and check it out:

1. Get the issue number from the project:
```
gh project item-list 1 --owner jfrog-fastci --format json | jq '.[] | select(.content.title=="Your Task Title")'
```

2. Create a branch from the issue and check it out in one step:
```
gh issue develop <issue-number> --repo <repo-name> --branch-name "[feature/bugfix/refactor/other]/fast-<issue-number>-task-title" --checkout
```

This will automatically create the branch following the naming convention, pull it, and check it out locally.

If you need to do it manually:
```
gh issue develop <issue-number> --repo <repo-name> --branch-name "[feature/bugfix/refactor/other]/fast-<issue-number>-task-title"
git fetch
git checkout <branch-name>
```

## Handeling Errors
If you encounter any errors or issues, please notify me immediately with specific details. Don't attempt to work around them on your own.
Please be explicit about:

What exactly went wrong
What I need to do to fix the problem